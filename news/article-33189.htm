<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://bifrostvnode.github.io/news/article-33189.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>java8新特性Stream流中anyMatch和allMatch和noneMatch的区别详解</title>
        <meta name="description" content="判断数据列表中是否存在任意一个元素符合设置的predicate条件，如果是就返回true，否则返回false。  接口定义：   boolean anyMatch(Predicate&lt;? sup" />
        <link rel="icon" href="/assets/website/img/bifrostvnode/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/meanmenu.css">
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/boxicons.min.css">
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/magnific-popup.min.css">
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/animate.css">
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/style.css">
    <link rel="stylesheet" href="/assets/website/css/bifrostvnode/responsive.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-EBSBDJ3LPE"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-EBSBDJ3LPE');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="loader">
        <div class="d-table">
            <div class="d-table-cell">
                <div class="spinner">
                    <div class="bounce1"></div>
                    <div class="bounce2"></div>
                    <div class="bounce3"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="navbar-area fixed-top">
        <div class="mobile-nav">
            <a href="/" class="logo">
                Bifrostv Node
            </a>
        </div>
        <div class="main-nav">
            <div class="container">
                <nav class="navbar navbar-expand-md navbar-light">
                                        <a class="navbar-brand" href="/">
                        <span>Bifrostv Node</span>
                    </a>
                                        <div class="collapse navbar-collapse mean-menu" id="navbarSupportedContent">
                        <ul class="navbar-nav ml-auto">
                                                        <li class="nav-item">
                                <a href="/" class="nav-link">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/free-nodes/" class="nav-link">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/paid-subscribe/" class="nav-link">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/news/" class="nav-link">新闻资讯</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="#" class="nav-link">关于</a>
                            </li>
                            <li class="nav-item">
                                <a href="#" class="nav-link">联系</a>
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>
        </div>
    </div>
    <div class="page-title-area">
        <img src="/assets/website/img/bifrostvnode/footer-car.png" alt="Title">
        <div class="container">
            <div class="page-title-content">
                <h1>java8新特性Stream流中anyMatch和allMatch和noneMatch的区别详解</h1>
                <ul>
                    <li>
                        <a href="/">首页</a>
                    </li>
                    <li>
                        <i class='bx bx-chevron-right'></i>
                    </li>
                    <li>
                        <a href="/news/">新闻资讯</a>
                    </li>
                    <li>
                        <i class='bx bx-chevron-right'></i>
                    </li>
                    <li>正文</li>
                </ul>
            </div>
        </div>
    </div>
    <section class="process-area pt-100 pb-70">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> </h1> <p>判断数据列表中是否存在任意一个元素符合设置的predicate条件，如果是就返回true，否则返回false。</p> <ul> <li>接口定义： <ul> <li> <p>boolean anyMatch(Predicate&lt;? super T&gt; predicate);</p> </li> </ul> </li> <li>方法描述： <ul> <li> <p>在anyMatch 接口定义中是接收 Predicate 类型参数，在Lamdba表达式中 Predicate&lt;T&gt; 是接收一个T类型参数，然后经过逻辑验证返回布尔值结果。这里anyMatch表示，判断的条件里，任意一个元素符合条件，就返回true值。</p> </li> </ul> </li> <li> <p>使用场景：</p> <ul> <li> <p>两个集合的交集</p> </li> </ul> </li> </ul> <pre><code class="language-java">    @Test     public void a17() {         List&lt;User&gt; list = new ArrayList&lt;&gt;();         list.add(new User("张三", 12, "南京"));         list.add(new User("李四", 13, "北京"));         list.add(new User("王五", 14, "苏州"));         list.add(new User("王五", 17, "苏州"));         List&lt;User&gt; userList = new ArrayList&lt;&gt;();         userList.add(new User("李四", 13, "北京"));         userList.add(new User("王五", 20, "广州"));         // 获取两个集合中有相同名字或者年龄相同的，只要满足其中一个条件即可，只会返回list集合里面的元素，有先后顺序返回         List&lt;User&gt; users1 = list.stream()                 .filter(a -&gt; userList.stream().anyMatch(b -&gt; a.getName().equals(b.getName()) || a.getAge() == b.getAge()))                 .collect(Collectors.toList());         // 获取两个集合中相同名字并且年龄相同的，必须同时满足两个条件         List&lt;User&gt; users2 = list.stream()                 .filter(a -&gt; userList.stream().anyMatch(b -&gt; a.getName().equals(b.getName()) &amp;&amp; a.getAge() == b.getAge()))                 .collect(Collectors.toList());         users1.forEach(item -&gt; {             System.out.println(item.getName() + item.getAge() + item.getEmailAddress());         });         /** 第一种结果展示：          * 李四13北京          * 王五14苏州          * 王五17苏州          */         users2.forEach(item -&gt; {             System.out.println(item.getName() + item.getAge() + item.getEmailAddress());         });         /** 第二种结果展示：          * 李四13北京          */     }   @Test public void a15() {         Stream&lt;String&gt; stream = Stream.of("ac", "bcddddd", "bd");         // 判断stream中其中任何一个元素中只要有包含b字符串或者l字符串就返回true         boolean isMatch = stream.anyMatch(str -&gt; str.contains("b") || str.contains("l"));         System.out.println(isMatch);  // true }</code></pre> </h1> <p>判断数据列表中全部元素都符合设置的predicate条件，如果是就返回true，否则返回false，流为空时总是返回true。</p> <ul> <li>接口定义： <ul> <li> <p>boolean allMatch(Predicate&lt;? super T&gt; predicate);</p> </li> </ul> </li> <li>方法描述： <ul> <li> <p>在allMatch 接口定义中是接收 Predicate 类型参数，在Lamdba表达式中 Predicate&lt;T&gt; 是接收一个T类型参数，然后经过逻辑验证返回布尔值结果。这里allMatch表示，判断的条件里，全部元素符合条件，就返回true值。</p> </li> </ul> </li> <li> <p>适用场景：</p> <ul> <li> <p>基本类型的集合，但不适合于对象集合（我自己的理解）</p> </li> <li> <p>allMatch里面不适合写 &amp;&amp; ，只适合写 ||，如果写&amp;&amp;，编译器会自动报黄色波浪线</p> </li> </ul> </li> </ul> <pre><code class="language-java">@Test public void a18() {         List&lt;String&gt; typeList1 = Arrays.asList("1", "2");         List&lt;String&gt; typeList2 = Arrays.asList("1", "2", "3", "4");         // 集合列表中全部元素必须在allMatch里面的那些字符串，只要全部元素中有任意一个不同的元素在AllMatch中就返回false         boolean isMatch1 = typeList1.stream().allMatch(a -&gt; a.equals("1") || a.equals("2") || a.equals("3"));         boolean isMatch2 = typeList2.stream().allMatch(a -&gt; a.equals("1") || a.equals("2") || a.equals("3"));         System.out.println(isMatch1);   // true         System.out.println(isMatch2);   // false }   @Test public void a16() {         Stream&lt;String&gt; stream = Stream.of("abc", "abc", "bcd");         // 判断stream中全部所有元素必须全部包含b字符串和c字符串就返回true，如果有一个元素不包含这两个字符串就返回false         boolean isMatch = stream.allMatch(str -&gt; str.contains("b") &amp;&amp; str.contains("c"));         System.out.println(isMatch);  // true }</code></pre> </h1> <p>判断数据列表中全部元素都不符合设置的predicate条件，如果是就返回true，否则返回false，流为空时总是返回true。</p> <ul> <li>接口定义： <ul> <li> <p>boolean noneMatch(Predicate&lt;? super T&gt; predicate);</p> </li> </ul> </li> <li>方法描述： <ul> <li> <p>在noneMatch接口定义中是接收 Predicate 类型参数，在Lamdba表达式中 Predicate&lt;T&gt; 是接收一个T类型参数，然后经过逻辑验证返回布尔值结果。这里noneMatch表示与allMatch相反，判断的条件里的元素，所有的元素都不符合，就返回true值。</p> </li> </ul> </li> <li> <p>适用场景：</p> <ul> <li> <p>两个集合的差集 （本人只想到这么做，如果有更简洁的可以告诉我怎么写，感谢0.0）</p> </li> </ul> </li> </ul> <pre><code class="language-java">@Test public void a17() {         List&lt;User&gt; list = new ArrayList&lt;&gt;();         list.add(new User("张三", 12, "南京"));         list.add(new User("李四", 13, "北京"));         list.add(new User("王五", 14, "苏州"));         list.add(new User("王五", 17, "苏州"));         List&lt;User&gt; userList = new ArrayList&lt;&gt;();         userList.add(new User("李四", 13, "北京"));         userList.add(new User("王五", 20, "广州"));         // 获取list集合和userList集合过滤掉两者集合中名字和年龄相同的数据后，只返回list集合的数据         List&lt;User&gt; users3 = list.stream()                 .filter(a -&gt; userList.stream().noneMatch(b -&gt; a.getName().equals(b.getName()) &amp;&amp; a.getAge() == b.getAge()))                 .collect(Collectors.toList());         // 获取userlist集合和list集合过滤掉两者集合中名字和年龄相同的数据后，只返回userList集合的数据         List&lt;User&gt; users4 = userList.stream()                 .filter(a -&gt; list.stream().noneMatch(b -&gt; a.getName().equals(b.getName()) &amp;&amp; a.getAge()==b.getAge()))                 .collect(Collectors.toList());         // 获取list和userList集合之间的差集，将上面两者集合合并，就是两个集合的差集         List&lt;User&gt; arrayList = new ArrayList&lt;&gt;();         arrayList.addAll(users3);         arrayList.addAll(users4);         arrayList.forEach(item -&gt; {             System.out.println(item.getName() + item.getAge() + item.getEmailAddress());         });         /**  两者集合之间的差集          * 张三12南京          * 王五14苏州          * 王五17苏州          * 王五20广州          */         System.out.println("-------------------");         users3.forEach(item -&gt; {             System.out.println(item.getName() + item.getAge() + item.getEmailAddress());         });         /**  只返回list集合中过滤掉之后的元素集合          * 张三12南京          * 王五14苏州          * 王五17苏州          */         System.out.println("-------------------");         users4.forEach(item -&gt; {             System.out.println(item.getName() + item.getAge() + item.getEmailAddress());         });         /**  只返回userList集合中过滤掉之后的元素集合          * 王五20广州          */ }  @Test public void a19() {         List&lt;String&gt; typeList1 = Arrays.asList("1", "2");         List&lt;String&gt; typeList2 = Arrays.asList("1", "2", "3", "4");         // 集合列表中全部元素只要都不在noneMatch里面的判断中，就返回true，集合列表中任何元素中只要有一个在noneMatch的判断中就返回false         boolean isMatch1 = typeList1.stream().noneMatch(a -&gt; a.equals("3") || a.equals("4"));         boolean isMatch2 = typeList2.stream().noneMatch(a -&gt; a.equals("1") || a.equals("2") || a.equals("3"));         System.out.println(isMatch1);   // true         System.out.println(isMatch2);   // false }  /** noneMatch */ @Test public void a20() {         Stream&lt;String&gt; stream = Stream.of("dddd", "ee", "qqq", "bcfff");         // 判断 stream 中所有的元素都不是以 a 开头，就返回true，如果所有的元素中只要其中一个元素是以a开头的，就返回false         boolean isMatch = stream.noneMatch(str-&gt;str.startsWith("a"));         System.out.println(isMatch);  // true }</code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-32725.htm">Docker镜像构建之docker commit</a></p>
                                        <p>下一个：<a href="/news/article-33190.htm">Python实现双X轴双Y轴绘图</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-1-free-node-subscribe-links.htm" title="10月1日→22.2M/S|2024年最新免费节点Bifrostv Node订阅链接地址">10月1日→22.2M/S|2024年最新免费节点Bifrostv Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-19680.htm" title="包含宠物领养平台的设计与实现研究现状怎么写的词条">包含宠物领养平台的设计与实现研究现状怎么写的词条</a></li>
                        <li class="py-2"><a href="/news/article-25200.htm" title="动物疫苗的种类和制备原理是什么呢（动物疫苗制备流程）">动物疫苗的种类和制备原理是什么呢（动物疫苗制备流程）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-22-free-high-speed-nodes.htm" title="12月22日→18.5M/S|2024年最新免费节点Bifrostv Node订阅链接地址">12月22日→18.5M/S|2024年最新免费节点Bifrostv Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-27062.htm" title="动物打疫苗获得的免疫称为什么（动物注射疫苗）">动物打疫苗获得的免疫称为什么（动物注射疫苗）</a></li>
                        <li class="py-2"><a href="/news/article-20594.htm" title="python初始化方法">python初始化方法</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-21-free-subscribe-node.htm" title="12月21日→22.2M/S|2024年最新免费节点Bifrostv Node订阅链接地址">12月21日→22.2M/S|2024年最新免费节点Bifrostv Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-9-free-node-subscribe-links.htm" title="11月9日→20.9M/S|2024年最新免费节点Bifrostv Node订阅链接地址">11月9日→20.9M/S|2024年最新免费节点Bifrostv Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-23335.htm" title="沈阳宠物猫市场在哪里（沈阳宠物猫批发）">沈阳宠物猫市场在哪里（沈阳宠物猫批发）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-5-free-node-subscribe.htm" title="10月5日→18.6M/S|2024年最新免费节点Bifrostv Node订阅链接地址">10月5日→18.6M/S|2024年最新免费节点Bifrostv Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer>
        <div class="container">
            <div class="copyright-area">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="copyright-item text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <a href="/">Bifrostv Node机场节点订阅官网</a> 版权所有
                            <br />
                            Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <script data-cfasync="false" src="/assets/website/js/frontend/bifrostvnode/email-decode.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/popper.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/jquery.meanmenu.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/jquery.mixitup.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/jquery.ajaxchimp.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/form-validator.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/contact-form-script.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/wow.min.js"></script>
    <script src="/assets/website/js/frontend/bifrostvnode/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>